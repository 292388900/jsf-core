<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd"
    >
	
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>
	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="connectionProperties" value="${jdbc.connectionProperties}" />
		<!-- 最大活动连接:连接池在同一时间能够分配的最大活动连接的数量, 如果设置为非正数则表示不限制 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 初始化连接:连接池启动时创建的初始化连接数量 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 最大空闲连接:连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,如果设置为负数表示不限制 -->
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <!-- 最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接,如果设置为0则不创建 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),超过时间则抛出异常,如果设置为-1表示无限等待 -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 标记是否删除泄露的连接,如果他们超过了removeAbandonedTimout的限制.如果设置为true, 连接被认为是被泄露并且可以被删除,
			如果空闲时间超过removeAbandonedTimeout. 设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接. -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <!-- 泄露的连接可以被删除的超时值, 单位秒 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}" />
    </bean>
    
    <!-- 事务配置: 事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务配置: 事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">  
        <tx:attributes>  
            <tx:method name="ins*"/>  
            <tx:method name="del*"/>  
            <tx:method name="upd*"/> 
            <tx:method name="batch*"/>  
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
    
	<!-- Spring AOP config -->  
    <aop:config >  
        <!-- 切入点 -->
        <aop:pointcut id="servicePointcut"  expression="execution(* com.ipd.jsf.worker.common.service..*(..))" />
        <aop:advisor pointcut-ref="servicePointcut" advice-ref="txAdvice"/>  
    </aop:config>  
    
	<!-- SessionFactory -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/worker-common-mappers/*DAO.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean" />
	</bean>
	<bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.ipd.jsf.worker.common.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
    </bean>
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
</beans>